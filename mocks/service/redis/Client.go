// Code generated by mockery v2.9.6. DO NOT EDIT.

package mocks

import (
	redis "github.com/spotahome/redis-operator/service/redis"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetNumberSentinelSlavesInMemory provides a mock function with given fields: connOpts
func (_m *Client) GetNumberSentinelSlavesInMemory(connOpts redis.SentinelConnectionOptions) (int32, error) {
	ret := _m.Called(connOpts)

	var r0 int32
	if rf, ok := ret.Get(0).(func(redis.SentinelConnectionOptions) int32); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(redis.SentinelConnectionOptions) error); ok {
		r1 = rf(connOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberSentinelsInMemory provides a mock function with given fields: connOpts
func (_m *Client) GetNumberSentinelsInMemory(connOpts redis.SentinelConnectionOptions) (int32, error) {
	ret := _m.Called(connOpts)

	var r0 int32
	if rf, ok := ret.Get(0).(func(redis.SentinelConnectionOptions) int32); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(redis.SentinelConnectionOptions) error); ok {
		r1 = rf(connOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSentinelMonitor provides a mock function with given fields: connOpts
func (_m *Client) GetSentinelMonitor(connOpts redis.SentinelConnectionOptions) (string, string, error) {
	ret := _m.Called(connOpts)

	var r0 string
	if rf, ok := ret.Get(0).(func(redis.SentinelConnectionOptions) string); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(redis.SentinelConnectionOptions) string); ok {
		r1 = rf(connOpts)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(redis.SentinelConnectionOptions) error); ok {
		r2 = rf(connOpts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSlaveOf provides a mock function with given fields: connOpts
func (_m *Client) GetSlaveOf(connOpts redis.RedisConnectionOptions) (string, error) {
	ret := _m.Called(connOpts)

	var r0 string
	if rf, ok := ret.Get(0).(func(redis.RedisConnectionOptions) string); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(redis.RedisConnectionOptions) error); ok {
		r1 = rf(connOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsMaster provides a mock function with given fields: connOpts
func (_m *Client) IsMaster(connOpts redis.RedisConnectionOptions) (bool, error) {
	ret := _m.Called(connOpts)

	var r0 bool
	if rf, ok := ret.Get(0).(func(redis.RedisConnectionOptions) bool); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(redis.RedisConnectionOptions) error); ok {
		r1 = rf(connOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeMaster provides a mock function with given fields: connOpts
func (_m *Client) MakeMaster(connOpts redis.RedisConnectionOptions) error {
	ret := _m.Called(connOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.RedisConnectionOptions) error); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeSlaveOf provides a mock function with given fields: connOpts, masterIP
func (_m *Client) MakeSlaveOf(connOpts redis.RedisConnectionOptions, masterIP string) error {
	ret := _m.Called(connOpts, masterIP)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.RedisConnectionOptions, string) error); ok {
		r0 = rf(connOpts, masterIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeSlaveOfWithPort provides a mock function with given fields: connOpts, masterIP, masterPort
func (_m *Client) MakeSlaveOfWithPort(connOpts redis.RedisConnectionOptions, masterIP string, masterPort string) error {
	ret := _m.Called(connOpts, masterIP, masterPort)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.RedisConnectionOptions, string, string) error); ok {
		r0 = rf(connOpts, masterIP, masterPort)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonitorRedis provides a mock function with given fields: connOpts, monitor, quorum, password
func (_m *Client) MonitorRedis(connOpts redis.SentinelConnectionOptions, monitor string, quorum string, password string) error {
	ret := _m.Called(connOpts, monitor, quorum, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.SentinelConnectionOptions, string, string, string) error); ok {
		r0 = rf(connOpts, monitor, quorum, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonitorRedisWithPort provides a mock function with given fields: connOpts, monitor, port, quorum, password
func (_m *Client) MonitorRedisWithPort(connOpts redis.SentinelConnectionOptions, monitor string, port string, quorum string, password string) error {
	ret := _m.Called(connOpts, monitor, port, quorum, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.SentinelConnectionOptions, string, string, string, string) error); ok {
		r0 = rf(connOpts, monitor, port, quorum, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetSentinel provides a mock function with given fields: connOpts
func (_m *Client) ResetSentinel(connOpts redis.SentinelConnectionOptions) error {
	ret := _m.Called(connOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.SentinelConnectionOptions) error); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SentinelCheckQuorum provides a mock function with given fields: connOpts
func (_m *Client) SentinelCheckQuorum(connOpts redis.SentinelConnectionOptions) error {
	ret := _m.Called(connOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.SentinelConnectionOptions) error); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCustomRedisConfig provides a mock function with given fields: connOpts, configs
func (_m *Client) SetCustomRedisConfig(connOpts redis.RedisConnectionOptions, configs []string) error {
	ret := _m.Called(connOpts, configs)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.RedisConnectionOptions, []string) error); ok {
		r0 = rf(connOpts, configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCustomSentinelConfig provides a mock function with given fields: connOpts, configs
func (_m *Client) SetCustomSentinelConfig(connOpts redis.SentinelConnectionOptions, configs []string) error {
	ret := _m.Called(connOpts, configs)

	var r0 error
	if rf, ok := ret.Get(0).(func(redis.SentinelConnectionOptions, []string) error); ok {
		r0 = rf(connOpts, configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlaveIsReady provides a mock function with given fields: connOpts
func (_m *Client) SlaveIsReady(connOpts redis.RedisConnectionOptions) (bool, error) {
	ret := _m.Called(connOpts)

	var r0 bool
	if rf, ok := ret.Get(0).(func(redis.RedisConnectionOptions) bool); ok {
		r0 = rf(connOpts)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(redis.RedisConnectionOptions) error); ok {
		r1 = rf(connOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
